BiocManager::install()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("tidyverse")
library(BiocManager)
library(tidyverse)
BiocManager::install("Biostrings")
install.packages("data.table")
BiocManager::install("biomaRt")
library(foreach)
BiocManager::install("foreach")
BiocManager::install("doParallel")
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
library(biomaRt)
BiocManager::install("XVector")
library(biomaRt)
library(foreach)
library(doParallel)
library(data.table)
library(Biostrings)
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
attributes <- listAttributes(ensembl)
meta <- read_tsv("C:/Users/Yuchen/Downloads/Homo_sapiens_mart_export.txt")
transcript_id <- meta$`Transcript stable ID`
# 设置并行计算的核心数
num_cores <- 4  # 设置为你想要的核心数
# 创建并行计算的集群
cl <- makeCluster(num_cores)
registerDoParallel(cl)
# 设置你的循环代码
sequences <- c('gene_exon_intron', 'cdna', 'coding', 'peptide')
merge <- data.frame()  # 创建一个空的数据框用于存储结果
# 循环并行运行代码
foreach(seq = sequences) %dopar% {
tmp <- getSequence(id = transcript_id, type = "ensembl_transcript_id", seqType = seq, mart = ensembl, useCache = TRUE) %>%
separate_rows(ensembl_transcript_id, sep = ";")
merge <- left_join(merge, tmp, by = c('Transcript stable ID'='ensembl_transcript_id'))
}
library(tidyverse)
# 设置你的循环代码
sequences <- c('gene_exon_intron', 'cdna', 'coding', 'peptide')
merge <- data.frame()  # 创建一个空的数据框用于存储结果
# 循环并行运行代码
foreach(seq = sequences) %dopar% {
tmp <- getSequence(id = transcript_id, type = "ensembl_transcript_id", seqType = seq, mart = ensembl, useCache = TRUE) %>%
separate_rows(ensembl_transcript_id, sep = ";")
merge <- left_join(merge, tmp, by = c('Transcript stable ID'='ensembl_transcript_id'))
}
tmp %>%
foreach(seq = sequences) %dopar% {
tmp <- getSequence(id = transcript_id, type = "ensembl_transcript_id", seqType = seq, mart = ensembl, useCache = TRUE)  %>%
separate_rows(ensembl_transcript_id, sep = ";")
merge <- left_join(merge, tmp, by = c('Transcript stable ID'='ensembl_transcript_id'))
}
?separate_rows
# 循环并行运行代码
foreach(seq = sequences) %dopar% {
tmp <- getSequence(id = transcript_id, type = "ensembl_transcript_id", seqType = seq, mart = ensembl, useCache = TRUE)
tmp <- separate_rows(data = tmp, ensembl_transcript_id, sep = ";")
merge <- left_join(merge, tmp, by = c('Transcript stable ID'='ensembl_transcript_id'))
}
# 循环并行运行代码
foreach(seq = sequences) %dopar% {
library(Biostrings)
library(data.table)
library(tidyverse)
library(biomaRt)
library(foreach)
library(doParallel)
tmp <- getSequence(id = transcript_id, type = "ensembl_transcript_id", seqType = seq, mart = ensembl, useCache = TRUE)
tmp <- separate_rows(data = tmp, ensembl_transcript_id, sep = ";")
merge <- left_join(merge, tmp, by = c('Transcript stable ID'='ensembl_transcript_id'))
}
merge <- meta  # 创建一个空的数据框用于存储结果
# 循环并行运行代码
foreach(seq = sequences) %dopar% {
library(Biostrings)
library(data.table)
library(tidyverse)
library(biomaRt)
library(foreach)
library(doParallel)
tmp <- getSequence(id = transcript_id, type = "ensembl_transcript_id", seqType = seq, mart = ensembl, useCache = TRUE)
tmp <- separate_rows(data = tmp, ensembl_transcript_id, sep = ";")
merge <- left_join(merge, tmp, by = c('Transcript stable ID'='ensembl_transcript_id'))
}
View(merge)
# 循环并行运行代码
test <- foreach(seq = sequences) %dopar% {
library(biomaRt)
tmp <- getSequence(id = transcript_id, type = "ensembl_transcript_id", seqType = seq, mart = ensembl, useCache = TRUE)
tmp <- separate_rows(data = tmp, ensembl_transcript_id, sep = ";")
}
# 设置并行计算的核心数
num_cores <- 4  # 设置为你想要的核心数
# 设置并行计算的核心数
num_cores <- 4  # 设置为你想要的核心数
source("~/.active-rstudio-document")
# 循环并行运行代码
test <- foreach(seq = sequences) %dopar% {
library(biomaRt)
library(tidyverse)
tmp <- getSequence(id = transcript_id, type = "ensembl_transcript_id", seqType = seq, mart = ensembl, useCache = TRUE)
tmp <- separate_rows(data = tmp, ensembl_transcript_id, sep = ";")
}
View(test)
BiocManager::install(" esquisse")
BiocManager::install("esquisse")
BiocManager::install("bslib")
library(bslib)
detach("package:bslib", unload = TRUE)
BiocManager::install("ggThemeAssist")
BiocManager::install("ggthemeassist")
BiocManager::install("ggThemeAssist")
BiocManager::install("ggExtra")
BiocManager::install("datapasta")
BiocManager::install("questionr")
BiocManager::install("reprex")
BiocManager::install("regexplain")
BiocManager::install("regexplain")
install.packages("regexplain")
BiocManager::install("annotater")
remotes::install_github("gadenbuie/regexplain")
install.packages("remotes")
remotes::install_github("gadenbuie/regexplain")
install.packages("devtools")
devtools::install_git("gadenbuie/regexplain")
remotes::::install_git("gadenbuie/regexplain")
remotes::install_git("gadenbuie/regexplain")
remotes::install_github("gadenbuie/regexplain")
remotes::install_github("gadenbuie/regexplain")
options(repos='http://cran.rstudio.com/')
remotes::install_github("gadenbuie/regexplain")
remotes::install_github("gadenbuie/regexplain")
remotes::install_github("gadenbuie/regexplain")
devtools::install_github("Danis102/seqpac", dependencies=TRUE)
library(devtools)
## Installation
devtools::install_github("Danis102/seqpac", dependencies=TRUE)
## Installation
devtools::install_github("Danis102/seqpac", dependencies=TRUE)
## Installation
devtools::install_github("Danis102/seqpac", dependencies=TRUE)
P <- ggplot(rpm) +
aes(
x = `hen1-8atrm2_231201N_S1_L003_R1_001`,
y = `EF-19_231201N_S2_L003_R1_001`
) +
geom_point(shape = "circle", size = 1.5, colour = "#4682B4") +
geom_abline(intercept = 0, slope = 1, color = "grey") +
scale_x_continuous(trans = "log10", limits = c(0.01,10000)) +
scale_y_continuous(trans = "log10") +
theme_bw()+
coord_fixed()
library(openxlsx)
library(tidyverse)
rpm <- read.xlsx("C:/Users/Yuchen/Desktop/miRNA.xlsx",sheet = 2)
P <- ggplot(rpm) +
aes(
x = `hen1-8atrm2_231201N_S1_L003_R1_001`,
y = `EF-19_231201N_S2_L003_R1_001`
) +
geom_point(shape = "circle", size = 1.5, colour = "#4682B4") +
geom_abline(intercept = 0, slope = 1, color = "grey") +
scale_x_continuous(trans = "log10", limits = c(0.01,10000)) +
scale_y_continuous(trans = "log10") +
theme_bw()+
coord_fixed()
ggExtra:::ggMarginalGadgetAddin ()
P <- ggplot(rpm) +
aes(
x = `hen1-8atrm2_231201N_S1_L003_R1_001`,
y = `EF-19_231201N_S2_L003_R1_001`
) +
geom_point(shape = "circle", size = 1.5, colour = "#4682B4") +
geom_abline(intercept = 0, slope = 1, color = "grey") +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10") +
theme_bw()+
coord_fixed()
ggExtra:::ggMarginalGadgetAddin ()
ggExtra:::ggMarginalGadgetAddin ()
ggExtra::ggMarginal(
p = P,
type = 'densigram',
margins = 'both',
size = 5,
colour = 'black',
fill = 'gray'
)
P <- ggplot(rpm) +
aes(
x = `hen1-8atrm2_231201N_S1_L003_R1_001`,
y = `EF-19_231201N_S2_L003_R1_001`
) +
geom_point(shape = "circle", size = 1.5, colour = "#4682B4") +
geom_abline(intercept = 0, slope = 1, color = "grey") +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10") +
theme_bw()+
coord_fixed()
P
ggThemeAssist:::ggThemeAssistAddin()
P <- ggplot(rpm) +
aes(
x = `hen1-8atrm2_231201N_S1_L003_R1_001`,
y = `EF-19_231201N_S2_L003_R1_001`
) +
geom_point(shape = "circle", size = 1.5, colour = "#4682B4") +
geom_abline(intercept = 0, slope = 1, color = "grey") +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10") +
theme_bw()+
coord_fixed()+
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 12))
names(rpm)
P1 <- ggplot(rpm) +
aes(
x = `hen1-8atrm2_231201N_S1_L003_R1_001`,
y = `EF-19_231201N_S2_L003_R1_001`
) +
geom_point(shape = "circle", size = 1.5, colour = "#4682B4") +
geom_abline(intercept = 0, slope = 1, color = "grey") +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10") +
theme_bw()+
coord_fixed()+
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 12))
P2 <- ggplot(rpm) +
aes(
x = `hen1-8atrm2_231201N_S1_L003_R1_001`,
y = `GF-10_231201N_S3_L003_R1_001`
) +
geom_point(shape = "circle", size = 1.5, colour = "#4682B4") +
geom_abline(intercept = 0, slope = 1, color = "grey") +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10") +
theme_bw()+
coord_fixed()+
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 12))
P3 <- ggplot(rpm) +
aes(
x = `hen1-8atrm2_231201N_S1_L003_R1_001`,
y = `GF-36_231201N_S4_L003_R1_001`
) +
geom_point(shape = "circle", size = 1.5, colour = "#4682B4") +
geom_abline(intercept = 0, slope = 1, color = "grey") +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10") +
theme_bw()+
coord_fixed()+
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 12))
P <- P1+P2+P3
P2 <- ggplot(rpm) +
aes(
x = `hen1-8atrm2_231201N_S1_L003_R1_001`,
y = `GF-10_231201N_S3_L003_R1_001`
) +
geom_point(shape = "circle", size = 1.5, colour = "#4682B4") +
geom_abline(intercept = 0, slope = 1, color = "grey") +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10") +
theme_bw()+
coord_fixed()+
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 12))
P2
P <- P1+P2+P3
install.packages("patchwork")
library(patchwork)
P <- P1+P2+P3
P
ggsave("scatter_plot.pdf",P)
load("D:/^^Project/TRM-sRNA-seq/publish results/Data Source/FigS3A/plot.RData")
library(openxlsx)
library(tidyverse)
library(ggh4x)
library(ggsci)
library(ggbeeswarm)
df <- read.xlsx("FigS3A.xlsx")
setwd("D:/^^Project/TRM-sRNA-seq/publish results/Data Source/FigS3A")
df$group <- as.factor(df$group)
df <- read.xlsx("FigS3A.xlsx")
df$group <- as.factor(df$group)
df$X1 <- factor(df$X1, levels = c("inflorescences","seedlings"))
df$X2 <- factor(df$X2, levels = c("Public sRNA-seq data","Conventional sRNA-seq","PBOX-sRNA-seq"))
p <- ggplot(df) +
aes(x = X1, y = count, colour = group) +
geom_beeswarm(size = 1.5, cex = 5, show.legend = FALSE) +
scale_color_igv() +
scale_y_continuous(limits = c(0,100),breaks = seq(0,100,20),expand = c(0,0))+
stat_summary(fun = median,
geom = 'crossbar', width = 0.5, linewidth = 0.1, color = 'black') +
theme_classic()+
facet_nested(~ X2 + X1,
scales = "free",
switch = "x")+
theme(ggh4x.facet.nestline = element_line(colour = "black"),
plot.subtitle = element_text(size = 9),
plot.caption = element_text(size = 9),
axis.title = element_text(size = 9),
axis.text = element_text(size = 9),
axis.text.y = element_text(size = 9),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
plot.title = element_text(size = 9),
legend.position = "none",
strip.background = element_rect(
color = "white", fill = "white"),
panel.grid = element_blank(),
strip.text.x = element_text(size = 9)) +
labs(x = NULL, y = "Relative percentage(%)")
ggplot(df) +
aes(x = X1, y = count, colour = group) +
geom_beeswarm(size = 1.5, cex = 5, show.legend = FALSE) +
scale_color_igv() +
scale_y_continuous(limits = c(0,100),breaks = seq(0,100,20),expand = c(0,0))+
stat_summary(fun = median,
geom = 'crossbar', width = 0.5, linewidth = 0.1, color = 'black') +
theme_classic()+
facet_nested(~ X2 + X1,
scales = "free",
switch = "x")+
theme(ggh4x.facet.nestline = element_line(colour = "black"),
plot.subtitle = element_text(size = 9),
plot.caption = element_text(size = 9),
axis.title = element_text(size = 9),
axis.text = element_text(size = 9),
axis.text.y = element_text(size = 9),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
plot.title = element_text(size = 9),
legend.position = "none",
strip.background = element_rect(
color = "white", fill = "white"),
panel.grid = element_blank(),
strip.text.x = element_text(size = 9)) +
labs(x = NULL, y = "Relative percentage(%)")
p <- ggplot(df) +
aes(x = X1, y = count, colour = group) +
geom_beeswarm(size = 2, cex = 5, show.legend = FALSE) +
scale_color_igv() +
scale_y_continuous(limits = c(0,100),breaks = seq(0,100,20),expand = c(0,0))+
stat_summary(fun = median,
geom = 'crossbar', width = 0.5, linewidth = 0.1, color = 'black') +
theme_classic()+
facet_nested(~ X2 + X1,
scales = "free",
switch = "x")+
theme(ggh4x.facet.nestline = element_line(colour = "black"),
plot.subtitle = element_text(size = 9),
plot.caption = element_text(size = 9),
axis.title = element_text(size = 9),
axis.text = element_text(size = 9),
axis.text.y = element_text(size = 9),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
plot.title = element_text(size = 9),
legend.position = "none",
strip.background = element_rect(
color = "white", fill = "white"),
panel.grid = element_blank(),
strip.text.x = element_text(size = 9)) +
labs(x = NULL, y = "Relative percentage(%)")
p
ggsave("FigS3A.pdf",p, width = 10,height = 4)
ggsave("FigS3A.pdf",p, width = 8,height = 4)
ggsave("FigS3A.pdf",p, width = 4,height = 2)
p <- ggplot(df) +
aes(x = X1, y = count, colour = group) +
geom_beeswarm(size = 1, cex = 5, show.legend = FALSE) +
scale_color_igv() +
scale_y_continuous(limits = c(0,100),breaks = seq(0,100,20),expand = c(0,0))+
stat_summary(fun = median,
geom = 'crossbar', width = 0.5, linewidth = 0.1, color = 'black') +
theme_classic()+
facet_nested(~ X2 + X1,
scales = "free",
switch = "x")+
theme(ggh4x.facet.nestline = element_line(colour = "black"),
#plot.subtitle = element_text(size = 9),
#plot.caption = element_text(size = 9),
#axis.title = element_text(size = 9),
#axis.text = element_text(size = 9),
#axis.text.y = element_text(size = 9),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
#plot.title = element_text(size = 9),
legend.position = "none",
strip.background = element_rect(
color = "white", fill = "white"),
panel.grid = element_blank(),
strip.text.x = element_text(size = 9)) +
labs(x = NULL, y = "Relative percentage(%)")
p
ggsave("FigS3A.pdf",p, width = 4,height = 2)
p <- ggplot(df) +
aes(x = X1, y = count, colour = group) +
geom_beeswarm(size = 0.5, cex = 5, show.legend = FALSE) +
scale_color_igv() +
scale_y_continuous(limits = c(0,100),breaks = seq(0,100,20),expand = c(0,0))+
stat_summary(fun = median,
geom = 'crossbar', width = 0.5, linewidth = 0.1, color = 'black') +
theme_classic()+
facet_nested(~ X2 + X1,
scales = "free",
switch = "x")+
theme(ggh4x.facet.nestline = element_line(colour = "black"),
#plot.subtitle = element_text(size = 9),
#plot.caption = element_text(size = 9),
#axis.title = element_text(size = 9),
#axis.text = element_text(size = 9),
#axis.text.y = element_text(size = 9),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
#plot.title = element_text(size = 9),
legend.position = "none",
strip.background = element_rect(
color = "white", fill = "white"),
panel.grid = element_blank(),
strip.text.x = element_text(size = 9)) +
labs(x = NULL, y = "Relative percentage(%)")
p
ggsave("FigS3A.pdf",p, width = 4,height = 2)
ggsave("FigS3A.pdf",p, width = 4,height = 3)
